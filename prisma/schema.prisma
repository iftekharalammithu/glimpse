// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// Run the Seed ```node ./prisma/seed.ts```

// To update the data base ```npx prisma migrate dev --name update```
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:../dev.db"
}

model User {
  id String @id @default(cuid())
  email String @unique
  firstname String?
  lastname String?
  createdAt DateTime @default(now())
  clerkId String @unique
  studio Media?
  image String?
  workspace       WorkSpace[]
  videos          Video[]
  subscription    Subscription?
  members         Member[]
  notification    Notification[]
  sender          Invite[]       @relation("sender")
  reciever        Invite[]       @relation("reciever")
  trail Boolean @default(false)
  
  updatedAt DateTime @updatedAt  
}

model Subscription {
  id          String           @id @default(cuid())
  User        User?             @relation(fields: [userId], references: [id])
  userId      String?           @unique 
  createdAt   DateTime          @default(now())
  plan        SUBSCRIPTION_PLAN @default(FREE)
  updatedAt   DateTime          @default(now())
  customerId  String?           @unique
}

enum SUBSCRIPTION_PLAN {
  PRO 
  FREE
}


model Member {
  id          String     @id @default(cuid())
  User        User?      @relation(fields: [userId], references: [id])
  userId      String?    
  createdAt   DateTime   @default(now())
  member      Boolean    @default(true)
  WorkSpace   WorkSpace? @relation(fields: [workSpaceId], references: [id])
  workSpaceId String?    
}


model Notification {
  id        String @id @default(cuid())
  User      User? @relation(fields: [userId], references: [id])
  userId    String? 
  content   String
}

model Media {
id String @id @default(cuid())
screen String?
mic String?
camera String?
preset PRESET @default(SD)
User User? @relation(fields: [userId] , references: [id])
userId String? @unique 
}

enum PRESET {
  HD
  SD
}

model WorkSpace {
id String @id @default(cuid())
name String
User User? @relation(fields: [userId] , references: [id])
userId String? 
type Type
createdAt DateTime  @default(now())
folders   Folder[]
videos    Video[]
members   Member[]
invite    Invite[]
}

enum Type {
  PERSONAL
  PUBLIC
}

model Folder {
  id          String     @id @default(cuid()) 
  name        String     @default("Untitled Folder")
  createdAt   DateTime   @default(now())
  WorkSpace   WorkSpace? @relation(fields: [workSpaceId], references: [id])
  workSpaceId String?    
  videos      Video[]
}

model Video {
  id          String     @id @default(cuid()) 
  title       String?    @default("Untitled Video")
  description String?    @default("No Description")
  source      String     @unique
  createdAt   DateTime   @default(now())
  Folder      Folder?    @relation(fields: [folderId], references: [id], onDelete: Cascade)
  folderId    String?    
  User        User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String?    
  processing  Boolean    @default(true)
  WorkSpace   WorkSpace? @relation(fields: [workSpaceId], references: [id], onDelete: Cascade)
  workSpaceId String?    
  views       Int        @default(0)
  summary     String?
}


model Invite {
  id              String     @id @default(cuid())
  sender          User?      @relation("sender", fields: [senderId], references: [id])
  senderId        String?    
  reciever        User?      @relation("reciever", fields: [recieverId], references: [id])
  recieverId      String?    
  content         String
  WorkSpace       WorkSpace? @relation(fields: [workSpaceId], references: [id])
  workSpaceId     String?    
  accepted        Boolean    @default(false)
}